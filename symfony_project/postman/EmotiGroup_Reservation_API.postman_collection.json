{
	"info": {
		"_postman_id": "1234567-89ab-cdef-0123-456789abcdef",
		"name": "Reservation API",
		"description": "API for managing reservations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwtToken}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:81",
			"type": "string"
		},
		{
			"key": "jwtToken",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    pm.expect(response).to.have.property('token');",
									"    pm.expect(response.token).to.be.a('string');",
									"});",
									"",
									"if (response.token) {",
									"    pm.environment.set(\"jwtToken\", response.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"user1\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/login",
							"host": ["{{baseUrl}}"],
							"path": ["api", "login"]
						},
						"description": "Login to get JWT token"
					},
					"response": [
						{
							"name": "Sukces",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"user1\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/login"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"body": {
								"token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						},
						{
							"name": "Błąd logowania",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"wrong\",\n    \"password\": \"wrong\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/login"
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"body": {
								"code": 401,
								"message": "Invalid credentials."
							}
						}
					]
				}
			]
		},
		{
			"name": "Reservations",
			"item": [
				{
					"name": "Create Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    pm.expect(response).to.have.property('status');",
									"    pm.expect(response).to.have.property('data');",
									"    pm.expect(response.status).to.equal('success');",
									"});",
									"",
									"pm.test(\"Reservation data is valid\", function () {",
									"    const reservation = response.data;",
									"    pm.expect(reservation).to.have.property('id');",
									"    pm.expect(reservation).to.have.property('startDate');",
									"    pm.expect(reservation).to.have.property('endDate');",
									"    pm.expect(reservation).to.have.property('status');",
									"});",
									"",
									"if (response.data && response.data.id) {",
									"    pm.environment.set(\"last_reservation_id\", response.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"",
									"const startDate = moment().add(1, 'days').format('YYYY-MM-DD');",
									"const endDate = moment().add(3, 'days').format('YYYY-MM-DD');",
									"",
									"pm.environment.set('start_date', startDate);",
									"pm.environment.set('end_date', endDate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"startDate\": \"{{start_date}}\",\n    \"endDate\": \"{{end_date}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/reservations",
							"host": ["{{baseUrl}}"],
							"path": ["api", "reservations"]
						},
						"description": "Create a new reservation"
					}
				},
				{
					"name": "Get Reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    pm.expect(response).to.have.property('status');",
									"    pm.expect(response).to.have.property('data');",
									"    pm.expect(response.status).to.equal('success');",
									"    pm.expect(response.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Recently created reservation exists\", function () {",
									"    const lastReservationId = pm.environment.get(\"last_reservation_id\");",
									"    if (lastReservationId) {",
									"        const found = response.data.some(reservation => reservation.id === parseInt(lastReservationId));",
									"        pm.expect(found).to.be.true;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reservations",
							"host": ["{{baseUrl}}"],
							"path": ["api", "reservations"]
						},
						"description": "Get list of all reservations"
					}
				},
				{
					"name": "Get Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    pm.expect(response).to.have.property('status');",
									"    pm.expect(response).to.have.property('data');",
									"    pm.expect(response.status).to.equal('success');",
									"});",
									"",
									"pm.test(\"Reservation data is valid\", function () {",
									"    const reservation = response.data;",
									"    pm.expect(reservation).to.have.property('id');",
									"    pm.expect(reservation).to.have.property('startDate');",
									"    pm.expect(reservation).to.have.property('endDate');",
									"    pm.expect(reservation).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reservations/{{last_reservation_id}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "reservations", "{{last_reservation_id}}"]
						},
						"description": "Get a specific reservation by ID"
					}
				},
				{
					"name": "Cancel Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    pm.expect(response).to.have.property('status');",
									"    pm.expect(response).to.have.property('data');",
									"    pm.expect(response.status).to.equal('success');",
									"});",
									"",
									"pm.test(\"Reservation is cancelled\", function () {",
									"    const reservation = response.data;",
									"    pm.expect(reservation.status).to.equal('cancelled');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reservations/{{last_reservation_id}}/cancel",
							"host": ["{{baseUrl}}"],
							"path": ["api", "reservations", "{{last_reservation_id}}", "cancel"]
						},
						"description": "Cancel a specific reservation"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
